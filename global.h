#ifndef GLOBAL
#define GLOBAL
#include <iostream>
#include <map>
#include <string>
#define NMAX 10
namespace compiler {

enum SymType {
  kNull = 0,
  kNumber = 1,
  kBecome = 2,
  kLessEqual = 3,
  kNotEqual = 4,
  kLess = 5,
  kGreaterEqual = 6,
  kGreater = 7,
  kComma = 8,
  kIdent = 9,
  kSemiColon = 10,
  kVar = 11,
  kBegin = 12,
  kEnd = 13,
  kPlus = 14,
  kMinus = 15,
  kConst = 16,
  kRepeat = 17,
  kRead = 18,
  kWrite = 19,
  kTo = 20,
  kIf = 21,
  kThen = 22,
  kDo = 23,
  kProcedure = 24,
  kMulti = 25,
  kDevide = 26,
  kLBracket = 27,
  kRBracket = 28,
  kEqual = 29,
  kDot = 30,
  kFunction = 31,
  kDownto = 32,
  kUntil = 33,
  kArray = 34,
  kOf = 35,
  kInteger = 36,
  kChar = 37,
  kReal = 38,
  kColon = 39,
  kLSquareBracket = 40,
  kRSquareBracket = 41,
  kSingleQuote = 42,
  kDoubleQuote = 43,
  kElse = 44,
  kFor = 45,
  kString = 46,
  kCharacter = 47,
  kRealNum = 48
};

std::map<SymType, std::string> SymbolDict{{kNull, "NULL"},
                                          {kNumber, "NUMBER"},
                                          {kBecome, "BECOME"},
                                          {kLessEqual, "LessEqual"},
                                          {kNotEqual, "NotEqual"},
                                          {kLess, "Less"},
                                          {kGreaterEqual, "GreaterEqual"},
                                          {kGreater, "Greater"},
                                          {kComma, "Comma"},
                                          {kIdent, "Iden"},
                                          {kSemiColon, "SemiColon"},
                                          {kVar, "Var"},
                                          {kBegin, "Begin"},
                                          {kEnd, "End"},
                                          {kPlus, "Plus"},
                                          {kMinus, "Minus"},
                                          {kConst, "Const"},
                                          {kRead, "Read"},
                                          {kRepeat, "Repeat"},
                                          {kTo, "to"},
                                          {kIf, "If"},
                                          {kThen, "Then"},
                                          {kDo, "Do"},
                                          {kProcedure, "Procedure"},
                                          {kMulti, "Multi"},
                                          {kDevide, "Devide"},
                                          {kLBracket, "LBracket"},
                                          {kRBracket, "RBracket"},
                                          {kEqual, "Equal"},
                                          {kElse, "Else"},
                                          {kWrite, "Write"},
                                          {kDot, "Dot"},
                                          {kColon, "Colon"},
                                          {kSingleQuote, "SingleQuote"},
                                          {kDoubleQuote, "DoubleQuote"},
                                          {kFunction, "Function"},
                                          {kUntil, "Until"},
                                          {kDownto, "Downto"},
                                          {kArray, "Array"},
                                          {kOf, "Of"},
                                          {kInteger, "Integer"},
                                          {kChar, "Char"},
                                          {kReal, "Real"},
                                          {kFor, "For"},
                                          {kString, "string"},
                                          {kCharacter, "character"},
                                          {kLSquareBracket, "LSquareBracket"},
                                          {kRSquareBracket, "RSquareBracket"}};

std::map<char, SymType> CharSymbol{
    {',', kComma},         {';', kSemiColon},
    {'+', kPlus},          {'-', kMinus},
    {'.', kDot},           {':', kColon},
    {'"', kDoubleQuote},   {'\'', kSingleQuote},
    {'*', kMulti},         {'/', kDevide},
    {'(', kLBracket},      {')', kRBracket},
    {'=', kEqual},         {'[', kLSquareBracket},
    {']', kRSquareBracket}};

std::map<std::string, SymType> WordSymbol{{"const", kConst},
                                          {"var", kVar},
                                          {"begin", kBegin},
                                          {"end", kEnd},
                                          {"repeat", kRepeat},
                                          {"do", kDo},
                                          {"read", kRead},
                                          {"write", kWrite},
                                          {"to", kTo},
                                          {"else", kElse},
                                          {"if", kIf},
                                          {"then", kThen},
                                          {"function", kFunction},
                                          {"downto", kDownto},
                                          {"until", kUntil},
                                          {"for", kFor},
                                          {"array", kArray},
                                          {"of", kOf},
                                          {"integer", kInteger},
                                          {"char", kChar},
                                          {"real", kReal},
                                          {"procedure", kProcedure}};

SymType sym;

void error() {
  std::cout << "ERROR" << std::endl;
  std::exit(0);
}
}  // namespace compiler
#endif